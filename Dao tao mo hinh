import cv2 as c

import numpy as np
TrainingImagePath = 'C:/Users/utplu/Desktop/DoAnTN/dataSet'


from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
    shear_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True)



# Generating the Training Data
train_set = train_datagen.flow_from_directory(
    TrainingImagePath,
    target_size=(64, 64),
    batch_size=32,
    class_mode='categorical')

# Printing class labels for each face





TrainClasses = train_set.class_indices

# Storing the face and the numeric tag for future reference
ResultMap = {}
for faceValue, faceName in zip(TrainClasses.values(), TrainClasses.keys()):
    ResultMap[faceValue] = faceName

# Saving the face map for future reference
import pickle

with open("ResultsMap.pkl", 'wb') as fileWriteStream:
    pickle.dump(ResultMap, fileWriteStream)

# The model will give answer as a numeric tag
# This mapping will help to get the corresponding face name for it
print("Mapping of Face and its ID", ResultMap)

################################################################################
# The number of neurons for the output layer is equal to the number of faces
OutputNeurons = len(ResultMap)
################################################################################

print('\n The Number of output neurons: ', OutputNeurons)
from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPool2D
from keras.layers import Flatten
from keras.layers import Dense
 
'''Initializing the Convolutional Neural Network'''
classifier= Sequential()
 
''' STEP--1 Convolution
# Adding the first layer of CNN
# we are using the format (64,64,3) because we are using TensorFlow backend
# It means 3 matrix of size (64X64) pixels representing Red, Green and Blue components of pixels
'''
classifier.add(Convolution2D(32, kernel_size=(5, 5), strides=(1, 1), input_shape=(64,64,3), activation='relu'))
 
'''# STEP--2 MAX Pooling'''
classifier.add(MaxPool2D(pool_size=(2,2)))

classifier.add(Convolution2D(32, kernel_size=(5, 5), strides=(1, 1)))
'''############## ADDITIONAL LAYER of CONVOLUTION for better accuracy #################'''
classifier.add(Convolution2D(64, kernel_size=(4, 4), strides=(1, 1), activation='relu'))
 
classifier.add(MaxPool2D(pool_size=(1,1)))
classifier.add(Convolution2D(128, kernel_size=(3, 3), strides=(1, 1), activation='relu'))
 
classifier.add(MaxPool2D(pool_size=(2,2)))
classifier.add(Convolution2D(192, kernel_size=(3, 3), strides=(1, 1), activation='relu'))
 
classifier.add(MaxPool2D(pool_size=(2,2)))
#
'''# STEP--3 FLattening'''
classifier.add(Flatten())
 
'''# STEP--4 Fully Connected Neural Network'''
classifier.add(Dense(64, activation='relu'))
 
classifier.add(Dense(OutputNeurons, activation='softmax'))
 
'''# Compiling the CNN'''
#classifier.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
classifier.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=["accuracy"])

 
###########################################################
import time
# Measuring the time taken by the model to train
StartTime = time.time()
 
# Starting the model training(100)
H = classifier.fit_generator(
                    train_set,
                    steps_per_epoch=30,
                    epochs=100,
                    validation_data=train_set,
                    validation_steps=10)
 
EndTime = time.time()
print("###### Total Time Taken: ", round((EndTime-StartTime)/60), 'Minutes ######')
#####save model
classifier.save('C:/Users/utplu/Desktop/DoAnTN/doantest.h5')
import h5py

from keras.models import load_model

classifier = load_model('C:/Users/utplu/Desktop/DoAnTN/doantest.h5')
import matplotlib.pyplot as plt


import h5py
from keras.models import load_model

classifier = load_model('C:/Users/utplu/Desktop/DoAnTN/doantest.h5')
import matplotlib.pyplot as plt

plt.figure(figsize=(10,5))
plt.title('Mô hình nhận diện')
plt.plot(H.history['accuracy'],'b-', H.history['val_accuracy'],'r--')
plt.ylabel('tỉ lệ chính xác')
plt.xlabel('Số vòng lặp')


plt.legend(['tập huấn luyện','tập xác thực'], loc='lower right')
plt.show()
plt.figure(figsize=(10,5))
plt.title('loss function')
plt.plot(H.history['loss'],'b-', H.history['val_loss'],'r--')
plt.ylabel('Tỉ lệ mất mát dữ liệu')
plt.xlabel('Số vòng lặp')
plt.legend(['Tập huấn luyện','tập xác thực'], loc='upper right')
plt.show()
