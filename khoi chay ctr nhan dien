import cv2 as c
import sqlite3
import numpy as np
import numpy as np 

from sklearn import linear_model
from sklearn.metrics import accuracy_score
TrainingImagePath = 'C:/Users/utplu/Desktop/DoAnTN/dataSet'


from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
    shear_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True)



# Generating the Training Data
train_set = train_datagen.flow_from_directory(
    TrainingImagePath,
    target_size=(64, 64),
    batch_size=32,
    class_mode='categorical')

# Printing class labels for each face





TrainClasses = train_set.class_indices

# Storing the face and the numeric tag for future reference
ResultMap = {}
for faceValue, faceName in zip(TrainClasses.values(), TrainClasses.keys()):
    ResultMap[faceValue] = faceName

# Saving the face map for future reference
import pickle

with open("ResultsMap.pkl", 'wb') as fileWriteStream:
    pickle.dump(ResultMap, fileWriteStream)

# The model will give answer as a numeric tag
# This mapping will help to get the corresponding face name for it
print("Mapping of Face and its ID", ResultMap)

################################################################################
# The number of neurons for the output layer is equal to the number of faces
OutputNeurons = len(ResultMap)
################################################################################

print('\n The Number of output neurons: ', OutputNeurons)
import cv2 as c
from keras.models import load_model
classifier = load_model('C:/Users/utplu/Desktop/DoAnTN/doantest.h5')


classifier.summary()

import numpy as np
from keras.preprocessing import image
####ket qua
fcc = c.CascadeClassifier('C:/Users/utplu/Desktop/DoAnTN/f.xml')
##lenh load model

cam = c.VideoCapture(0)


while (True):
    ret, f = cam.read()
    pg = c.cvtColor(f, c.COLOR_BGR2GRAY)
    faces = fcc.detectMultiScale(
        pg,
        scaleFactor=1.5,
        minNeighbors=5,
        minSize=(64, 64),
        flags=c.CASCADE_SCALE_IMAGE
    )
    for (x, y, w, h) in faces:
        mat = c.resize(f[y:y + h, x:x + w], (64, 64))
        #
        result =np.argmax(classifier.predict(mat.reshape((-1, 64, 64, 3))))
                
        c.rectangle(f, (x, y), (x + w, y + h), (255, 0, 255), 2)
        ######nhan dang
        c.putText(f, str(ResultMap[result]), (x + 35, y - 35), c.FONT_HERSHEY_SIMPLEX, 0.8, (255, 25, 255), 2)
       
            
    c.imshow("recognizated camera.jpg", f)
    if(c.waitKey(1)==ord('q')):
        break;
cam.release()
c.destroyAllWindows()
